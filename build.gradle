import java.lang.annotation.Target;

apply plugin: "groovy"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'pmd'
apply plugin: 'jetty'
apply plugin: 'application'
apply plugin: 'build-dashboard'
apply plugin: 'codenarc'
apply from: './properties.gradle'
apply plugin: 'jacoco'
jacoco {
  toolVersion = '0.7.1.201405082137'
  reportsDir = file("$buildDir/reports/jacoco")
}
mainClassName = "pl.java.scalatech.main.Starter"
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF=8"]
libsDirName = './target'

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

[compileJava, compileTestJava].each {
    //it.options.encoding = 'UTF-8'
    it.options.compilerArgs += [ '-source', '1.8', '-target', '1.8' ]
    }

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
logger.quiet "Loading configuration for environment '$env'."

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release-local/"}
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "http://m2.neo4j.org" }
}


configurations {
    integrationTest.extendsFrom testRuntime
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        exclude group: "commons-logging"
        exclude module: "slf4j-log4j12"
        exclude module: "hibernate-jpa-2.0-api"
    }
    
}

sourceSets {
 
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath = sourceSets.main.output + configurations.integrationTest
        runtimeClasspath = output + compileClasspath
        
 
    }
 
}


    dependencies {
        compile ("org.codehaus.groovy:groovy:${groovyVersion}")
        compile ("org.springframework:spring-core:${springVersion}")
        compile ("org.springframework:spring-beans:${springVersion}")
        compile ("org.springframework:spring-context:${springVersion}")
        compile ("org.springframework:spring-orm:${springVersion}")
        compile ("org.springframework:spring-tx:${springVersion}")
        compile ("org.springframework:spring-aop:${springVersion}")
           
        compile ("org.springframework:spring-aspects:${springVersion}")
        compile ("org.springframework:spring-webmvc:${springVersion}")
        
        compile ("org.springframework.data:spring-data-neo4j-rest:3.0.0.RELEASE")
       
        compile ("org.springframework.data:spring-data-neo4j:3.0.0.RELEASE")
        compile ("org.springframework.data:spring-data-jpa:${springDataJPAVersion}")
        compile ("org.springframework.hateoas:spring-hateoas:0.7.0.RELEASE")
        
        
        compile ("javax.validation:validation-api:${javaxValidationVersion}")
        compile ("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")
        compile ("org.hibernate:hibernate-core:${hibernateVersion}")
        compile ("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
    
        compile ("com.sun.jersey:jersey-bundle:1.18")
        
  
        compile("org.codehaus.jackson:jackson-mapper-asl:${jacksonMapperVersion}")
        compile("org.codehaus.jackson:jackson-core-asl:${jacksonMapperVersion}")
        //compiler("joda-time:joda-time-hibernate:1.3")
    
        compile("org.projectlombok:lombok:${lombokVersion}")
        compile("com.google.guava:guava:${guavaVersion}")
    
        compile("com.jolbox:bonecp:${bonecpVersion}")
        compile("com.jolbox:bonecp-spring:${bonecpVersion}")
        compile("com.jolbox:bonecp-provider:${bonecpVersion}")
    
        compile("org.aspectj:aspectjrt:${aspectJVersion}")
        compile("org.aspectj:aspectjweaver:${aspectJVersion}")
    
        compile("org.slf4j:slf4j-api:$slf4jVersion")
        runtime("ch.qos.logback:logback-classic:$logbackVersion")
        compile("ch.qos.logback:logback-core:$logbackVersion")
    
        testCompile("org.hamcrest:hamcrest-all:$hamcrestVersion")
        testCompile("org.mockito:mockito-all:$mockitoVersion")
       
        testCompile("junit:junit:$junitVersion")
        testCompile("org.easytesting:fest-assert:${festAssertVersion}")
        testCompile ("org.springframework:spring-test:${springVersion}")
       
    }
   
 
    test {
        reports.html.destination = file ("$reports.html.destination/unit")
        testLogging {
          events "passed", "skipped", "failed", "standardOut", "standardError"
          showStandardStreams = false
        }
        
        minHeapSize = "128m"
        maxHeapSize = "512m"
      
    
    /*   
       beforeTest { descriptor ->
           logger.lifecycle("Running test: " + descriptor)
        }  
        onOutput { descriptor, event ->
           logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
       }*/
     //test.addTestListener(new TestListenerImpl())
        }
    
   
    
   
    jar {
        baseName = 'spring4features'
        version =  '0.0.1'
    
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
        manifest {
            attributes 'Implementation-Title': 'Gradle spring4features',
            'Implementation-Version': version,
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Built-Gradle': gradle.gradleVersion
        }
    }
   
    
task functionalTest () {
    doFirst{
        println "Starting jetty as a daemon"
        jettyRun.daemon = true
        jettyRun.execute()
        jettyRun.stopPort=8081
        jettyRun.stopKey="STOP"
    }
    doLast {
        println "Stopping jetty"
        jettyStop.stopPort=8081
        jettyStop.stopKey="STOP"
        jettyStop.execute()
    }
}

task integrationTest(type: Test) {
    description  = 'Run integration tests'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/integration")
    minHeapSize = "256m"
    maxHeapSize = "512m"
    }

   check.dependsOn integrationTest
         
    task wrapper(type: Wrapper) { gradleVersion = '10.1' }
    
    
   /* class TestListenerImpl implements TestListener {
        void beforeSuite(TestDescriptor suite) { println "START [$suite] [$suite.name]" }
        void afterSuite(TestDescriptor suite, TestResult result) { println "FINISH [$suite] [$suite.name]" }
        void beforeTest(TestDescriptor test) { println "START [$test] [$test.name]" }
        void afterTest(TestDescriptor test, TestResult result) { println "FINISH [$test] [$test.name] [$result.exception]" }
        }*/
  
