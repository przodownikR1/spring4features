


apply plugin: 'java'
apply from:  'gradle/dependencies.gradle'
apply from:  'gradle/integration-test.gradle'
apply from:  'gradle/functional-test.gradle'
apply from:  'gradle/test.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'jetty'
apply plugin: 'application'
apply plugin: 'build-dashboard'
apply from: 'gradle/simpleXmlTask.gradle'
apply from: 'gradle/xmlTask.gradle'
apply from: 'gradle/jacoco.gradle'
applicationName = "przodownikStarter"
mainClassName = "pl.java.scalatech.main.Starter"
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF=8"]
libsDirName = './target'



sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

[compileJava, compileTestJava].each {
    //it.options.encoding = 'UTF-8'
    it.options.compilerArgs += [ '-source', '1.8', '-target', '1.8' ]
    }

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
logger.quiet "Loading configuration for environment '$env'."

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release-local/"}
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "http://m2.neo4j.org" }
}


configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        exclude group: "commons-logging"
        exclude module: "slf4j-log4j12"
        exclude module: "hibernate-jpa-2.0-api"
    }
    
}

sourceSets {
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
}
    jar {
        baseName = 'spring4features'
        version =  '0.0.1'
    
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
        manifest {
            attributes 'Implementation-Title': 'Gradle spring4features',
            'Implementation-Version': version,
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Built-Gradle': gradle.gradleVersion
        }
    }
    
    task wrapper(type: Wrapper) {  }